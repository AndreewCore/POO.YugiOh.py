import random
from enum import Enum

class CartaYugiOh:
  def _init_ (self, id, vida, nombre, descripcion, ataque, defensa):
    self.id = id
    self.vida = vida
    self.nombre = nombre
    self.descripcion = descripcion
    self.ataque = ataque
    self.defensa = defensa

  def activar (self):
    pass   "para activar una carta lo sobresscribiran los hijos"

class CartaMonstruo(CartaYugiOh):
    def __init__(self, id, vida, nombre, descripcion, ataque, defensa, tipo, atributo, posicion, boca_arriba):
        super().__init__(id, nombre, descripcion, ataque, defensa)
        self.tipo = tipo
        self.atributo = atributo
        self.posicion = posicion
        self.boca_arriba = boca_arriba


    def mostrar_informacion(self):
        print(f"{self.nombre} (ATK: {self.ataque}, DEF: {self.defensa}) está en el campo.")

    def cambiar_posicion(self):
        """Cambia la posición entre ataque y defensa."""
        if self.boca_arriba:
            self.posicion = "ataque" if self.posicion == "defensa" else "defensa"
            print(f"La posición de {self.nombre} ahora es {self.posicion}.")
        else:
            print(f"No puedes cambiar la posición de {self.nombre} porque está boca abajo.")

    def voltear(self):
        """Voltea la carta boca arriba."""
        if not self.boca_arriba:
            self.boca_arriba = True
            print(f"{self.nombre} ahora está boca arriba.")
        else:
            print(f"{self.nombre} ya está boca arriba.")

class CartaMagia(CartaYugiOh):
    def __init__(self,id, nombre, descripcion, incremento, tipo_objetivo, afecta_ataque):
        super().__init__(nombre, descripcion)
        self.id = id
        self.incremento = incremento
        self.tipo_objetivo = tipo_objetivo
        self.afecta_ataque = afecta_ataque  # True para ataque, False para defensa

class CartaTrampa(CartaYugiOh):
    def __init__(self, id, nombre, descripcion, atributo_bloqueado):
        super().__init__(id,nombre, descripcion)
        self.atributo_bloqueado = atributo_bloqueado

class Jugador:
  def init(self, nombre):
    self.nombre = nombre self.deck = [] self.mano = []
    self.tablero = {"monstruos": [None] * 3, "magicas_trampas": [None] * 3}
    self.puntos_vida = 4000

class Fases(Enum)
  FaseTomarCarta= "Fase de tomar carta"
  FasePrincipal= "Fase principal"
  FaseBatalla= "Fase Batalla"

class TipoMonstruo(Enum):
    LANZADOR_DE_CONJUROS = "L"
    DRAGON = "D"
    ZOMBI = "Z"
    GUERRERO = "G"
    BESTIA = "B"
    DEMONIO = "O"

class AtributoMonstruo(Enum):
    OSCURIDAD = "Oscuridad"
    LUZ = "Luz"
    TIERRA = "Tierra"
    AGUA = "Agua"
    FUEGO = "Fuego"
    VIENTO = "Viento"
class Juego:
    def __init__(self, jugador: Jugador, maquina: Jugador):
        self.jugador = jugador
        self.maquina = maquina
        self.turno = random.choice([jugador, maquina])##se determina quien inicia
        self.fase = "Inicio"
        self.utilitaria = Utilitaria()  # Instancia de Utilitaria
        self.turno_actual = 1

    def robar_carta(self):    #Para tomar cartas del deck al mazo
      if self.deck:
        carta = self.deck.pop(0)
        self.mano.append(carta)
        print(f"{self.nombre} ha robado la carta: {carta.nombre}")
      else:
        print(f"{self.nombre} no puede robar, el deck está vacío.")

class Utilitaria:
  def crear_deck_desde_archivo(self, archivo):
    monstruos = []
    magicas = []
    trampas = []

    with open(archivo, 'r') as f:
        for linea in f:
            datos = linea.strip().split(',')
            if len(datos) == 9:  # Carta de monstruo
                id, vida, nombre, descripcion, ataque, defensa, tipo, atributo, posicion, boca_arriba = datos
                tipo = TipoMonstruo(tipo.strip())
                atributo = AtributoMonstruo(atributo.strip())
                carta = CartaMonstruo(int(id), int(vida), nombre.strip(), descripcion.strip(), int(ataque), int(defensa), tipo, atributo, posicion.strip(), bool(boca_arriba))
                monstruos.append(carta)
            elif len(datos) == 5:  # Carta mágica
                id, nombre, descripcion, incremento, tipo_objetivo, afecta_ataque = datos
                carta = CartaMagia(int(id), nombre.strip(), descripcion.strip(), int(incremento), tipo_objetivo.strip(), bool(afecta_ataque))
                magicas.append(carta)
            elif len(datos) == 3:  # Carta trampa
                id, nombre, descripcion, atributo_bloqueado = datos
                carta = CartaTrampa(int(id), nombre.strip(), descripcion.strip(), atributo_bloqueado.strip())
                trampas.append(carta)

    # Seleccionar aleatoriamente las cartas para el deck
    deck = random.sample(monstruos, 20) + random.sample(magicas, 5) + random.sample(trampas, 5)
    random.shuffle(deck)  # Barajar el deck
    return deck
